#!/usr/bin/env node

import { spawn, exec } from 'child_process';
import { promises as fs } from 'fs';
import path from 'path';
import crypto from 'crypto';

/**
 * Script de d√©ploiement s√©curis√©
 * V√©rifie la s√©curit√© avant d√©ploiement et configure l'environnement de production
 */

const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
  bright: '\x1b[1m'
};

console.log(`${colors.bright}${colors.blue}üöÄ D√âPLOIEMENT S√âCURIS√â - Local AI Landing${colors.reset}\n`);

// Configuration de d√©ploiement
const deployConfig = {
  buildDir: 'dist',
  backupDir: 'backups',
  maxBackups: 5,
  requiredEnvVars: [
    'NODE_ENV',
    'PORT',
    'HTTPS'
  ],
  securityChecks: true,
  compressionLevel: 9
};

// 1. V√©rifications pr√©-d√©ploiement
async function preDeploymentChecks() {
  console.log(`${colors.yellow}üîç V√©rifications pr√©-d√©ploiement...${colors.reset}`);
  
  const checks = [];
  
  // V√©rifier que nous sommes en mode production
  if (process.env.NODE_ENV !== 'production') {
    checks.push('NODE_ENV doit √™tre d√©fini √† "production"');
  }
  
  // V√©rifier les variables d'environnement requises
  for (const envVar of deployConfig.requiredEnvVars) {
    if (!process.env[envVar]) {
      checks.push(`Variable d'environnement manquante: ${envVar}`);
    }
  }
  
  // V√©rifier l'existence des fichiers de configuration s√©curis√©s
  const requiredFiles = [
    'vite.config.prod.js',
    'middleware/security.js',
    'src/utils/security.js'
  ];
  
  for (const file of requiredFiles) {
    try {
      await fs.access(file);
    } catch (error) {
      checks.push(`Fichier requis manquant: ${file}`);
    }
  }
  
  if (checks.length > 0) {
    console.log(`${colors.red}‚ùå √âchecs de v√©rification:${colors.reset}`);
    checks.forEach(check => console.log(`   ${colors.red}‚Ä¢ ${check}${colors.reset}`));
    throw new Error('V√©rifications pr√©-d√©ploiement √©chou√©es');
  }
  
  console.log(`${colors.green}‚úÖ Toutes les v√©rifications pr√©-d√©ploiement r√©ussies${colors.reset}`);
}

// 2. Audit de s√©curit√© rapide
async function quickSecurityAudit() {
  console.log(`\n${colors.yellow}üõ°Ô∏è  Audit de s√©curit√© rapide...${colors.reset}`);
  
  return new Promise((resolve, reject) => {
    exec('npm audit --audit-level high', (error, stdout, stderr) => {
      if (error && error.code > 0) {
        console.log(`${colors.red}‚ö†Ô∏è  Vuln√©rabilit√©s de s√©curit√© d√©tect√©es${colors.reset}`);
        console.log(`${colors.yellow}Ex√©cutez 'npm audit fix' avant le d√©ploiement${colors.reset}`);
        reject(new Error('Vuln√©rabilit√©s de s√©curit√© d√©tect√©es'));
      } else {
        console.log(`${colors.green}‚úÖ Audit de s√©curit√© pass√©${colors.reset}`);
        resolve();
      }
    });
  });
}

// 3. Sauvegarde de l'ancien d√©ploiement
async function createBackup() {
  console.log(`\n${colors.yellow}üíæ Cr√©ation de la sauvegarde...${colors.reset}`);
  
  try {
    // Cr√©er le r√©pertoire de sauvegarde s'il n'existe pas
    await fs.mkdir(deployConfig.backupDir, { recursive: true });
    
    // G√©n√©rer un nom de sauvegarde avec timestamp
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupName = `backup-${timestamp}`;
    const backupPath = path.join(deployConfig.backupDir, backupName);
    
    // V√©rifier si le r√©pertoire de build existe
    try {
      await fs.access(deployConfig.buildDir);
      
      // Copier le r√©pertoire de build actuel
      await fs.cp(deployConfig.buildDir, backupPath, { recursive: true });
      
      console.log(`${colors.green}‚úÖ Sauvegarde cr√©√©e: ${backupPath}${colors.reset}`);
      
      // Nettoyer les anciennes sauvegardes
      await cleanOldBackups();
      
    } catch (error) {
      console.log(`${colors.yellow}‚ö†Ô∏è  Pas de build pr√©c√©dent √† sauvegarder${colors.reset}`);
    }
    
  } catch (error) {
    console.log(`${colors.red}‚ùå Erreur lors de la sauvegarde: ${error.message}${colors.reset}`);
    throw error;
  }
}

// 4. Nettoyer les anciennes sauvegardes
async function cleanOldBackups() {
  try {
    const backups = await fs.readdir(deployConfig.backupDir);
    const backupDirs = [];
    
    for (const backup of backups) {
      const backupPath = path.join(deployConfig.backupDir, backup);
      const stats = await fs.stat(backupPath);
      if (stats.isDirectory() && backup.startsWith('backup-')) {
        backupDirs.push({ name: backup, path: backupPath, time: stats.mtime });
      }
    }
    
    // Trier par date (plus r√©cent en premier)
    backupDirs.sort((a, b) => b.time - a.time);
    
    // Supprimer les anciennes sauvegardes si n√©cessaire
    if (backupDirs.length > deployConfig.maxBackups) {
      const toDelete = backupDirs.slice(deployConfig.maxBackups);
      
      for (const backup of toDelete) {
        await fs.rm(backup.path, { recursive: true, force: true });
        console.log(`${colors.cyan}üóëÔ∏è  Ancienne sauvegarde supprim√©e: ${backup.name}${colors.reset}`);
      }
    }
    
  } catch (error) {
    console.log(`${colors.yellow}‚ö†Ô∏è  Erreur lors du nettoyage des sauvegardes: ${error.message}${colors.reset}`);
  }
}

// 5. Build de production s√©curis√©
async function secureBuild() {
  console.log(`\n${colors.yellow}üî® Build de production s√©curis√©...${colors.reset}`);
  
  return new Promise((resolve, reject) => {
    // Utiliser la configuration de production s√©curis√©e
    const buildProcess = spawn('npm', ['run', 'build'], {
      stdio: 'inherit',
      env: {
        ...process.env,
        NODE_ENV: 'production',
        VITE_CONFIG: 'vite.config.prod.js'
      }
    });
    
    buildProcess.on('close', (code) => {
      if (code === 0) {
        console.log(`${colors.green}‚úÖ Build de production termin√© avec succ√®s${colors.reset}`);
        resolve();
      } else {
        reject(new Error(`Build √©chou√© avec le code ${code}`));
      }
    });
    
    buildProcess.on('error', (error) => {
      reject(error);
    });
  });
}

// 6. Optimisations post-build
async function postBuildOptimizations() {
  console.log(`\n${colors.yellow}‚ö° Optimisations post-build...${colors.reset}`);
  
  try {
    const buildPath = deployConfig.buildDir;
    
    // V√©rifier que le build existe
    await fs.access(buildPath);
    
    // Cr√©er les fichiers de s√©curit√© additionnels
    await createSecurityFiles(buildPath);
    
    // Cr√©er un fichier de version
    await createVersionFile(buildPath);
    
    // Optimiser les permissions des fichiers
    await optimizeFilePermissions(buildPath);
    
    console.log(`${colors.green}‚úÖ Optimisations post-build termin√©es${colors.reset}`);
    
  } catch (error) {
    console.log(`${colors.red}‚ùå Erreur lors des optimisations: ${error.message}${colors.reset}`);
    throw error;
  }
}

// 7. Cr√©er les fichiers de s√©curit√©
async function createSecurityFiles(buildPath) {
  // Cr√©er robots.txt s√©curis√©
  const robotsTxt = `User-agent: *
Disallow: /admin
Disallow: /api/
Disallow: /.env
Disallow: /config
Disallow: /src
Disallow: /node_modules
Disallow: /backup
Disallow: /logs

# Security
Disallow: *.log
Disallow: *.env
Disallow: *.config

Sitemap: /sitemap.xml`;

  await fs.writeFile(path.join(buildPath, 'robots.txt'), robotsTxt);
  
  // Cr√©er .htaccess pour Apache (optionnel)
  const htaccess = `# S√©curit√© maximale
<Files ".env">
    Require all denied
</Files>

<Files "*.log">
    Require all denied
</Files>

# Headers de s√©curit√©
<IfModule mod_headers.c>
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options DENY
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Referrer-Policy "strict-origin-when-cross-origin"
    Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
</IfModule>

# Compression
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
</IfModule>`;

  await fs.writeFile(path.join(buildPath, '.htaccess'), htaccess);
  
  console.log(`${colors.cyan}üìÑ Fichiers de s√©curit√© cr√©√©s${colors.reset}`);
}

// 8. Cr√©er un fichier de version
async function createVersionFile(buildPath) {
  const version = {
    version: process.env.npm_package_version || '1.0.0',
    buildDate: new Date().toISOString(),
    buildHash: crypto.randomBytes(8).toString('hex'),
    nodeEnv: 'production',
    security: {
      httpsEnabled: process.env.HTTPS === 'true',
      hstsEnabled: true,
      cspEnabled: true,
      rateLimitEnabled: true
    }
  };
  
  await fs.writeFile(
    path.join(buildPath, 'version.json'),
    JSON.stringify(version, null, 2)
  );
  
  console.log(`${colors.cyan}üìã Fichier de version cr√©√©${colors.reset}`);
}

// 9. Optimiser les permissions des fichiers
async function optimizeFilePermissions(buildPath) {
  // Cette fonction serait plus utile sur des syst√®mes Unix
  // Pour Windows, nous nous contentons de v√©rifier l'existence
  try {
    const files = await fs.readdir(buildPath, { recursive: true });
    console.log(`${colors.cyan}üîê ${files.length} fichiers v√©rifi√©s${colors.reset}`);
  } catch (error) {
    console.log(`${colors.yellow}‚ö†Ô∏è  Impossible de v√©rifier les permissions: ${error.message}${colors.reset}`);
  }
}

// 10. V√©rifications post-d√©ploiement
async function postDeploymentChecks() {
  console.log(`\n${colors.yellow}üîç V√©rifications post-d√©ploiement...${colors.reset}`);
  
  const buildPath = deployConfig.buildDir;
  
  // V√©rifier que les fichiers essentiels sont pr√©sents
  const essentialFiles = [
    'index.html',
    'assets',
    'robots.txt',
    'version.json'
  ];
  
  for (const file of essentialFiles) {
    try {
      await fs.access(path.join(buildPath, file));
      console.log(`${colors.green}‚úÖ ${file}${colors.reset}`);
    } catch (error) {
      throw new Error(`Fichier essentiel manquant: ${file}`);
    }
  }
  
  // V√©rifier la taille du build
  const stats = await fs.stat(buildPath);
  console.log(`${colors.cyan}üìä Build g√©n√©r√© avec succ√®s${colors.reset}`);
}

// Script principal de d√©ploiement
async function deploy() {
  const startTime = Date.now();
  
  try {
    console.log(`${colors.bright}D√©but du d√©ploiement s√©curis√©...${colors.reset}\n`);
    
    // √âtapes de d√©ploiement
    await preDeploymentChecks();
    
    if (deployConfig.securityChecks) {
      await quickSecurityAudit();
    }
    
    await createBackup();
    await secureBuild();
    await postBuildOptimizations();
    await postDeploymentChecks();
    
    const deployTime = Math.round((Date.now() - startTime) / 1000);
    
    console.log(`\n${colors.bright}${colors.green}üéâ D√âPLOIEMENT R√âUSSI !${colors.reset}`);
    console.log(`${colors.cyan}Temps de d√©ploiement: ${deployTime}s${colors.reset}`);
    console.log(`${colors.cyan}Build disponible dans: ${deployConfig.buildDir}${colors.reset}\n`);
    
    // Instructions de d√©marrage
    console.log(`${colors.bright}üìã √âTAPES SUIVANTES:${colors.reset}`);
    console.log(`${colors.yellow}1. Copier le contenu de ${deployConfig.buildDir} vers votre serveur web${colors.reset}`);
    console.log(`${colors.yellow}2. Configurer HTTPS avec vos certificats SSL${colors.reset}`);
    console.log(`${colors.yellow}3. V√©rifier que les variables d'environnement sont configur√©es${colors.reset}`);
    console.log(`${colors.yellow}4. Tester l'application en production${colors.reset}\n`);
    
  } catch (error) {
    console.error(`\n${colors.red}‚ùå √âCHEC DU D√âPLOIEMENT${colors.reset}`);
    console.error(`${colors.red}Erreur: ${error.message}${colors.reset}\n`);
    
    // Instructions de r√©cup√©ration
    console.log(`${colors.yellow}üîÑ R√âCUP√âRATION:${colors.reset}`);
    console.log(`${colors.yellow}1. V√©rifiez les erreurs ci-dessus${colors.reset}`);
    console.log(`${colors.yellow}2. Corrigez les probl√®mes identifi√©s${colors.reset}`);
    console.log(`${colors.yellow}3. Relancez le script de d√©ploiement${colors.reset}\n`);
    
    process.exit(1);
  }
}

// Ex√©cution du d√©ploiement
deploy();